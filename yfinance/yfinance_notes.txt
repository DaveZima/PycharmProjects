
            tick_obj = yf.Ticker(d_ticker)
            # history(end=) is non-inclusive so add one to the end date to ensure it will be included in the dataframe
            year_end_adj = d_year_end + dt.timedelta(days=1)
            tick_hist = tick_obj.history(start=d_year_start, end=year_end_adj)

            if tick_hist.empty:

                log_msg("WARN","Ticker %s: missing or incomplete data for %d" % (d_ticker,d_year))

            else:

                # Validate dataframe year_start and year_end rows

                data_top = tick_hist.head()
                df_year_start = data_top.index[0]
                if df_year_start != d_year_start:
                    log_msg("EROR", "%s dataframe year start %s does not match period year start %s" % (
                    d_ticker, df_year_start, d_year_start))
                    raise SystemExit(1)

                d_year_start_price = tick_hist.iloc[0, 3]



tick_obj = yf.Ticker("TSLA")


# Ticker.history() parameters
# period: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
# interval: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo
# start: YYYY-MM-DD datetime (if not using period)
# end: YYYY-MM-DD datetime (if not using period)
# prepost: Include Pre and Post regular market data in results? (Default is False)
# auto_adjust: Adjust all OHLC (Open/High/Low/Close prices) automatically? (Default is True)
# actions: Download stock dividends and stock splits events? (Default is True)
log_msg("INFO","Initializing the Ticker object history data")
tick_hist = tick_obj.history(period="max")


# Determine len and range of data
# shape[0] = number of rows and shape[1] = number of columns
l = len(tick_hist)
r = range(tick_hist.shape[0])
log_msg("INFO","DataFrame cols = %d rows = %d" % (tick_hist.shape[1],tick_hist.shape[0]))

col_names = []
for l in tick_hist.columns:
    col_names.append(l)

# Indices

data_top = tick_hist.head()
min_date = data_top.index[0]

data_bot = tick_hist.tail()
max_date = data_bot.index[len(data_bot.index) - 1]

x = dt.datetime(2020, 5, 17)

print("min_date: ")
print(min_date)
print("max_date: ")
print(max_date)

# Pandas replacement for python datetime.datetime object
# Different assignments

td = pd.Timestamp('2010-06-29 00:00:00')
td = pd.Timestamp(2010, 6, 29)
td = pd.Timestamp(year=2010, month=6, day=29)


# Define year trading day start and stop



# 2012-01-02
# MSFT max range = 1986-03-13 2021-01-19
# Good choice to validate year start and end
# list of dictionaries year = 2012, start = pd.Timestamp, end = pd.Timestamp

tick_obj_test = yf.Ticker("MSFT")
# tick_hist_test = tick_obj_test.history(interval="1d",start="2012-01-01",end="2012-01-07")

start_ts = pd.Timestamp(2012, 1, 1)
end_ts = pd.Timestamp(2012, 1, 7)

# end is less than.  need 1,3 and 1,4 to give you 1,3

start_ts = pd.Timestamp(2021, 1, 1)
end_ts = pd.Timestamp(2021, 1, 7)
tick_hist_test = tick_obj_test.history(start=start_ts,end=end_ts)
print(tick_hist_test)

start_ts = pd.Timestamp(2021, 12, 24)
end_ts = pd.Timestamp(2021, 12, 31)
tick_hist_test = tick_obj_test.history(start=start_ts,end=end_ts)
print(tick_hist_test)


now_ts = pd.Timestamp.now()
print("now_ts")
print(now_ts)


# Build year_dates
# Another year_data ticker = , year_start = , year_start_price, year_end = , year_end_price =

# tick_hist_test = tick_obj_test.history(period="max")



"""
Set a 10 year time window but accommodate any min year
Best to create a dataframe
Show trailing returns (year_end - year_start) / year_end
Look for a master list of symbols (NASDAQ)
Start with a simple csv that can be imported into Google Sheets
Should be able to easily handle tens of thousands
Project is Target Finder
Good intro in to capturing financial data and pandas in python
Need to capture 2011 to 2021 start and end dates
Use sorting and filtering in Google Sheets to start
Maybe this is a start to an investing model
"""

# df.head(n) tail(n) creates a df with a subset of rows

x = tick_hist.iloc[0,1]
# print("[0,0]")
# print(x)

# type() = class  dir() = attributes getattr() = get attribute value (dataframe?)


# Determine the min max dates






type()
dir()
id()
getattr()
hasattr()
globals()
locals()
callable()


tick_list = ["TSLA","ROKU"]
tick_data = {}

# tick_hist = tick.history(start="2020-06-02", end="2020-06-07", interval="1d")

# tick_hist = tick.history(period="max")

for tick in ["TSLA"]:
    log_msg("INFO","Processing ticker %s" % (tick))

    tick_obj = yf.Ticker(tick)
    tick_df = pd.DataFrame.from_dict(tick_obj.info, orient="index")
    tick_df.reset_index(inplace=True)

    # Define Dataframe columns. Attribute is the df attribute and Recent is the recent attribute value
    tick_df.columns = ["Attribute","Recent"]
    # Add Dataframe to dictionary using the ticker as a key
    tick_data[tick] = tick_df

# Combine the dictionary of dataframes in to a single dataframe
combined_df = pd.concat(tick_data)
combined_df = combined_df.reset_index()

# Delete the unnecessary "level_1" column and clean-up the column_names
del combined_df["level_1"]

# Update / clean-up the column names
combined_df.columns = ["Ticker", "Attribute", "Recent"]

# Retrieve an attribute as a Dataframe object
employees = combined_df[combined_df["Attribute"]=="fullTimeEmployees"].reset_index()





# Ticker.history() parameters
# period: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
# interval: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo
# start: YYYY-MM-DD datetime (if not using period)
# end: YYYY-MM-DD datetime (if not using period)
# prepost: Include Pre and Post regular market data in results? (Default is False)
# auto_adjust: Adjust all OHLC (Open/High/Low/Close prices) automatically? (Default is True)
# actions: Download stock dividends and stock splits events? (Default is True)

# DataFrame attributes
# index: index of the DataFrame
# columns: column labels
# axes: list representing both axes
# Dtypes: data types of data
# Size: number of elements
# Shape: tuple representing the dimensions
# Values: NumPy representation of the DataFrame
# Empty: True or False
# Ndim: int containing the number of axes dimensions
# T: Transpose the DataFrame


# yfinance Ticker object dictionary

{'zip': '94304', 'sector': 'Consumer Cyclical', 'fullTimeEmployees': 48016,
'longBusinessSummary': 'Tesla, Inc. designs, develops, manufactures, leases, and sells electric vehicles, and energy generation and storage systems in the United States, China, Netherlands, Norway, and internationally. The company operates in two segments, Automotive; and Energy Generation and Storage. The Automotive segment offers sedans and sport utility vehicles. It also provides electric powertrain components and systems; and services for electric vehicles through its company-owned service locations, and Tesla mobile service technicians, as well as sells used vehicles. This segment markets and sells its products through a network of company-owned stores and galleries, as well as through its own Website. The Energy Generation and Storage segment offers energy storage products, such as rechargeable lithium-ion battery systems for use in homes, industrial, commercial facilities, and utility grids; and designs, manufactures, installs, maintains, leases, and sells solar energy generation and energy storage products to residential and commercial customers. It also provides vehicle insurance services, as well as renewable energy. The company was formerly known as Tesla Motors, Inc. and changed its name to Tesla, Inc. in February 2017. Tesla, Inc. was founded in 2003 and is headquartered in Palo Alto, California.', 'city': 'Palo Alto', 'phone': '650-681-5000', 'state': 'CA', 'country': 'United States', 'companyOfficers': [], 'website': 'http://www.tesla.com', 'maxAge': 1, 'address1': '3500 Deer Creek Road', 'industry': 'Auto Manufacturers',



 'previousClose': 845,
 'regularMarketOpen': 852,
 'twoHundredDayAverage': 460.41495,
 'trailingAnnualDividendYield': None,
 'payoutRatio': 0,
 'volume24Hr': None,
 'regularMarketDayHigh': 859.9,
 'navPrice': None,
 'averageDailyVolume10Day': 47943700,
 'totalAssets': None,
 'regularMarketPreviousClose': 845,
 'fiftyDayAverage': 688.6282,
 'trailingAnnualDividendRate': None,
 'open': 852,
 'toCurrency': None,
 'averageVolume10days': 47943700,
 'expireDate': None,
 'yield': None,
 'algorithm': None,
 'dividendRate': None,
 'exDividendDate': None,
 'beta': 2.190651,
 'circulatingSupply': None,
 'startDate': None,
 'regularMarketDayLow': 819.1,
 'priceHint': 2,
 'currency': 'USD',
 'trailingPE': 1579.6558,
 'regularMarketVolume': 38777596,
 'lastMarket': None,
 'maxSupply': None,
 'openInterest': None,
 'marketCap': 783117844480,
 'volumeAllCurrencies': None,
 'strikePrice': None,
 'averageVolume': 44450812,
 'priceToSalesTrailing12Months': 27.79379,
 'dayLow': 819.1,
 'ask': 824,
 'ytdReturn': None,
 'askSize': 1000,
 'volume': 38777596,
 'fiftyTwoWeekHigh': 884.49,
 'forwardPE': 206.54,
 'fromCurrency': None,
 'fiveYearAvgDividendYield': None,
 'fiftyTwoWeekLow': 70.102,
 'bid': 823.77,
 'tradeable': False,
 'dividendYield': None,
 'bidSize': 1200,
 'dayHigh': 859.9,
 'exchange': 'NMS',
 'shortName': 'Tesla,
 Inc.',
 'longName': 'Tesla,
 Inc.',
 'exchangeTimezoneName': 'America/New_York',
 'exchangeTimezoneShortName': 'EST',
 'isEsgPopulated': False,
 'gmtOffSetMilliseconds': '-18000000',
 'quoteType': 'EQUITY',
 'symbol': 'TSLA',
 'messageBoardId': 'finmb_27444752',
 'market': 'us_market',
 'annualHoldingsTurnover': None,
 'enterpriseToRevenue': 27.868,
 'beta3Year': None,
 'profitMargins': 0.01973,
 'enterpriseToEbitda': 195.377,
 '52WeekChange': 6.5489764,
 'morningStarRiskRating': None,
 'forwardEps': 4,
 'revenueQuarterlyGrowth': None,
 'sharesOutstanding': 947900992,
 'fundInceptionDate': None,
 'annualReportExpenseRatio': None,
 'bookValue': 16.91,
 'sharesShort': 60620873,
 'sharesPercentSharesOut': 0.064,
 'fundFamily': None,
 'lastFiscalYearEnd': 1577750400,
 'heldPercentInstitutions': 0.42529,
 'netIncomeToCommon': 533000000,
 'trailingEps': 0.523,
 'lastDividendValue': None,
 'SandP52WeekChange': 0.134745,
 'priceToBook': 48.856297,
 'heldPercentInsiders': 0.19985001,
 'nextFiscalYearEnd': 1640908800,
 'mostRecentQuarter': 1601424000,
 'shortRatio': 1.11,
 'sharesShortPreviousMonthDate': 1606694400,
 'floatShares': 759552857,
 'enterpriseValue': 785218666496,
 'threeYearAverageReturn': None,
 'lastSplitDate': 1598832000,
 'lastSplitFactor': '5:1',
 'legalType': None,
 'lastDividendDate': None,
 'morningStarOverallRating': None,
 'earningsQuarterlyGrowth': 1.315,
 'dateShortInterest': 1609372800,
 'pegRatio': 0.88,
 'lastCapGain': None,
 'shortPercentOfFloat': 0.0798,
 'sharesShortPriorMonth': 46499466,
 'impliedSharesOutstanding': None,
 'category': None,
 'fiveYearAverageReturn': None,
 'regularMarketPrice': 852,
 'logo_url': 'https://logo.clearbit.com/tesla.com'}
